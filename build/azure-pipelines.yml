# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
    branches:
        include:
         - '*'
         
pool: databinding self hosted interactive

steps:
- task: NuGetToolInstaller@1
  inputs:
    versionSpec: 
    checkLatest: true
- task: GitVersion@4
  inputs:
    updateAssemblyInfo: true
    preferBundledVersion: false
  displayName: Run GitVersion task
- script: echo %Action%%BuildVersion%
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: $(GitVersion.SemVer)
  displayName: Set build version
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $filePath = '$(Build.Repository.LocalPath)/src/T4.FileManager.VisualStudio.targets'
      (Get-Content $filePath).Replace('0.0.0-replaceversion','$(GitVersion.NuGetVersionV2)') | Set-Content $filePath
  displayName: Replace version in T4.FileManager.VisualStudio.targets 
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $filePath = '$(Build.Repository.LocalPath)/src/T4.FileManager.VisualStudio.nuspec'
      (Get-Content $filePath).Replace('0.0.0-replaceversion','$(GitVersion.NuGetVersionV2)') | Set-Content $filePath
  displayName: Replace version in T4.FileManager.VisualStudio.nuspec 
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/T4.FileManager.VisualStudio.csproj'
    configuration: 'release'
  displayName: Build .NET Standard T4.FileManager.VisualStudio - Release
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/packages.config'
    feedsToUse: 'select'
    restoreDirectory: '$(System.DefaultWorkingDirectory)\packages'
  displayName: Restore for Full Framework
- task: VSBuild@1
  inputs:
    solution: '**/T4.FileManager.VisualStudio.AcceptanceCriteria.csproj'
    configuration: 'release'
  displayName: Build Full Framework AcceptanceCriteria - Release 
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Start-Process -FilePath "$(Build.Repository.LocalPath)/T4.FileManager.VisualStudio.sln"'
  displayName: Start solution on build agnet in visual studio for AcceptanceCriteria-Tests
- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*AcceptanceCriteria*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
  displayName: Run SpecFlow-Tests (AcceptanceCriteria-Tests)
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Agent.TempDirectory)/TestResults'
    Contents: '**'
    TargetFolder: '$(Build.StagingDirectory)/TestResults'
  displayName: Copy test results to staging directory    
- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: '**/*.nuspec'
    versioningScheme: 'off'
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  displayName: Pack T4.FileManager.VisualStudio 
- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg;!$(Build.ArtifactStagingDirectory)/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '$(InternalNugetFeed)'
    allowPackageConflicts: true
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  displayName: Push T4.FileManager.VisualStudio to internal nuget feed
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: Publish staging directory