parameters:
- name: canPublish
  displayName: Deploy to nuget
  type: boolean
  default: false

trigger:
    branches:
        include:
         - '*'

stages:
- stage: BUILD_AND_TEST
  pool: databinding self hosted interactive

  jobs:
  - job:
    steps:
    - task: GitVersion@5
      inputs:
        updateAssemblyInfo: true
        preferBundledVersion: false
        versionSpec: '0.0.0'
      displayName: Run GitVersion task

    - script: echo %Action%%BuildVersion%
      displayName: Set build version
      env:
        Action: '##vso[build.updatebuildnumber]'
        BuildVersion: $(GitVersion.SemVer)

    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet '
      inputs:
        checkLatest: true

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: T4.FileManager.VisualStudio.sln

    - task: VSBuild@1
      displayName: 'Build solution T4.FileManager.VisualStudio.sln'
      inputs:
        solution: T4.FileManager.VisualStudio.sln
        clean: true

    - powershell: 'Start-Process -FilePath "$(Build.Repository.LocalPath)/T4.FileManager.VisualStudio.sln"'
      displayName: 'Start Visual Studio for testing acceptance criteria'

    - task: VSTest@2
      displayName: 'VsTest - Test Szenarios'
      inputs:
        testAssemblyVer2: |
          **\*AcceptanceCriteria*.dll
          !**\*TestAdapter.dll
          !**\obj\**
        resultsFolder: '$(Common.TestResultsDirectory)'

    - task: techtalk.techtalk-specflow-plus.specflow-plus.SpecFlowPlus@0
      displayName: 'SpecFlow+ Living Doc'
      inputs:
        projectFilePath: tests/T4.FileManager.VisualStudio.AcceptanceCriteria/Features
        projectName: 'T4 Filemanager for Visual Studio'
        workItemPrefix: 'db-'

    - powershell: |
       New-Item mkdocs.yml -Force
             Add-Content -path mkdocs.yml "
             site_name: T4.FileManager.VisualStudio Documentation $(GitVersion.SemVer)
             site_description: 'Manager for generating multiple files with T4 text templates.'
             site_author: 'databinding gmbh'
             docs_dir: docs/
             repo_name: ' $(Build.Repository.Name)'
             repo_url: '$(Build.Repository.Uri)'
             theme:
               name: 'material'"
      displayName: 'Create mkdocs.yml'

    - script: |
         pip install mkdocs
         mkdocs build 
      displayName: 'Build Documentation'

    - task: CopyFiles@2
      displayName: 'Copy documentation'
      inputs:
        SourceFolder: site
        TargetFolder: '$(Build.ArtifactStagingDirectory)\documentation'

    - task: CopyFiles@2
      displayName: 'Copy test report'
      inputs:
        SourceFolder: '$(Common.TestResultsDirectory)'
        Contents: '*.html'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\documentation'

    - task: NuGetCommand@2
      displayName: 'NuGet pack'
      inputs:
        command: pack
        packagesToPack: src/T4.FileManager.VisualStudio.nuspec
        packDestination: '$(Build.ArtifactStagingDirectory)/nuget'
        versioningScheme: byBuildNumber

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: documentation'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/documentation'
        ArtifactName: documentation

- stage: DEPLOY_GITHUB_PAGES
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  pool: databinding self hosted interactive
  variables:
    - group: github

  jobs:
  - job:
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        patterns: 'documentation/**/*'
        path: 'documentation'

    - task: AccidentalFish.githubpages-publish.AccidentalFish.GitHubPages-Publish.GitHubPagesPublish@1
      displayName: 'Publishes to GitHub Pages'
      inputs:
        docPath: 'documentation\documentation\*'
        githubusername: '$(username)'
        githubemail: '$(email)'
        githubaccesstoken: '$(pat)'
        repositoryname: $(repo)

- stage: DEPLOY_TEST
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  pool: databinding self hosted interactive
  variables:
    - group: Test

  jobs:
  - job:
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        patterns: 'drop/**/*'
        path: 'drop'

    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet'
      inputs:
        checkLatest: true

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        packagesToPush: 'drop/**/*.nupkg;!drop/**/*.symbols.nupkg'
        publishVstsFeed: '$(NuGetFeed)'
        allowPackageConflicts: true

- ${{ if eq(parameters.canPublish, true) }}: 
  - stage: DEPLOY_TO_NUGET
    pool: databinding self hosted interactive
    variables:
      - group: Prod

    jobs:
    - job:
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          patterns: 'drop/**/*'
          path: 'drop'

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        inputs:
          checkLatest: true

      - task: NuGetCommand@2
        displayName: 'NuGet push'
        inputs:
          command: push
          nuGetFeedType: external
          packagesToPush: 'drop/**/*.nupkg;!drop/**/*.symbols.nupkg'
          publishFeedCredentials: 'NuGetFeed'